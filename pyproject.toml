[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "dlabs"
version = "0.1.0"
description = "A comprehensive deep learning codebase for Computer Vision, NLP, and Handwriting Recognition"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "DLABS Team", email = "your.email@example.com"}
]
maintainers = [
    {name = "DLABS Team", email = "your.email@example.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = [
    "deep learning",
    "machine learning",
    "computer vision",
    "natural language processing",
    "handwriting recognition",
    "pytorch",
    "artificial intelligence",
    "ocr",
    "neural networks",
]
dependencies = [
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "torchaudio>=2.0.0",
    "opencv-python>=4.8.0",
    "Pillow>=9.5.0",
    "transformers>=4.30.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "matplotlib>=3.7.0",
    "scikit-learn>=1.3.0",
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.22.0",
    "rich>=13.4.0",
    "tqdm>=4.65.0",
]
requires-python = ">=3.8"

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.7.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.3.0",
    "mypy>=1.5.0",
]
gpu = [
    "torch>=2.0.0+cu118",
    "torchvision>=0.15.0+cu118",
    "torchaudio>=2.0.0+cu118",
]
all = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.7.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.3.0",
    "mypy>=1.5.0",
]

[project.scripts]
dlabs-test = "quick_test:main"

[project.urls]
Homepage = "https://github.com/yourusername/dlabs"
Documentation = "https://github.com/yourusername/dlabs/wiki"
Repository = "https://github.com/yourusername/dlabs"
"Bug Tracker" = "https://github.com/yourusername/dlabs/issues"

# Tool configurations
[tool.setuptools.packages.find]
where = ["."]
include = ["dlabs*", "computer_vision*", "nlp*", "handwriting_recognition*", "utils*"]
exclude = ["tests*", "experiments*", "data*", "models*"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
  | models/pretrained
  | data/raw
  | data/external
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["dlabs", "computer_vision", "nlp", "handwriting_recognition", "utils"]
skip_glob = ["**/migrations/*", "venv/*", "models/pretrained/*", "data/raw/*"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    ".eggs",
    "*.egg",
    "build",
    "dist",
    "models/pretrained",
    "data/raw",
    "data/external",
]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:D",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "cv2.*",
    "PIL.*",
    "sklearn.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
    "easyocr.*",
    "paddleocr.*",
    "transformers.*",
    "datasets.*",
    "timm.*",
    "albumentations.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=dlabs",
    "--cov=computer_vision",
    "--cov=nlp",
    "--cov=handwriting_recognition",
    "--cov=utils",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests that require GPU",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["dlabs", "computer_vision", "nlp", "handwriting_recognition", "utils"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "quick_test.py",
    "*/experiments/*",
    "*/data/*",
    "*/models/pretrained/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "experiments", "data"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process_args

[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py"]
